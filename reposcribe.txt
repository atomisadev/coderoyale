Project Directory: /home/ubuntu/coderoyalereal
Output File: /home/ubuntu/coderoyalereal/reposcribe.txt
Date: 2025-05-31T04:18:18.882Z

File Tree:
coderoyalereal/
├── package.json
├── .gitignore
├── packages/
│   ├── ui/
│   │   ├── src/
│   │   │   ├── button.tsx
│   │   │   ├── card.tsx
│   │   │   └── code.tsx
│   │   ├── package.json
│   │   ├── tsconfig.json
│   │   ├── turbo/
│   │   │   └── generators/
│   │   │       ├── templates/
│   │   │       │   └── component.hbs
│   │   │       └── config.ts
│   │   └── eslint.config.mjs
│   ├── eslint-config/
│   │   ├── package.json
│   │   ├── base.js
│   │   ├── react-internal.js
│   │   ├── next.js
│   │   └── README.md
│   └── typescript-config/
│       ├── package.json
│       ├── nextjs.json
│       ├── react-library.json
│       └── base.json
├── apps/
│   ├── web/
│   │   ├── eslint.config.js
│   │   ├── next.config.js
│   │   ├── package.json
│   │   ├── components.json
│   │   ├── app/
│   │   │   ├── page.module.css
│   │   │   ├── globals.css
│   │   │   ├── page.tsx
│   │   │   ├── fonts/
│   │   │   └── layout.tsx
│   │   ├── .gitignore
│   │   ├── tsconfig.json
│   │   ├── components/
│   │   │   ├── game-screen.tsx
│   │   │   ├── create-join-room.tsx
│   │   │   ├── ui/
│   │   │   │   └── button.tsx
│   │   │   └── lobby.tsx
│   │   ├── context/
│   │   │   ├── game-socket-provider.tsx
│   │   │   └── tanstack-provider.tsx
│   │   ├── next-env.d.ts
│   │   ├── public/
│   │   │   ├── next.svg
│   │   │   ├── turborepo-light.svg
│   │   │   ├── window.svg
│   │   │   ├── vercel.svg
│   │   │   ├── file-text.svg
│   │   │   ├── globe.svg
│   │   │   └── turborepo-dark.svg
│   │   ├── postcss.config.mjs
│   │   ├── README.md
│   │   └── lib/
│   │       └── utils.ts
│   └── api/
│       ├── Models/
│       │   ├── Player.cs
│       │   ├── GameRoom.cs
│       │   └── WebSocketMessages.cs
│       ├── package.json
│       ├── Controllers/
│       │   └── GameController.cs
│       ├── MyCsApi.csproj
│       ├── .gitignore
│       ├── Item.cs
│       ├── tsconfig.json
│       ├── MyCsApi.http
│       ├── Properties/
│       │   └── launchSettings.json
│       ├── Program.cs
│       ├── appsettings.json
│       ├── appsettings.Development.json
│       ├── index.ts
│       ├── Services/
│       │   ├── CardManager.cs
│       │   └── RoomManager.cs
│       ├── WebSockets/
│       │   └── WebSocketMessageHandler.cs
│       └── README.md
├── .npmrc
├── README.md
├── turbo.json
└── coderoyalereal.sln



--- File Contents ---

-------------------- package.json (path: package.json) --------------------
{
  "name": "coderoyale",
  "private": true,
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev",
    "lint": "turbo run lint",
    "format": "prettier --write \"**/*.{ts,tsx,md}\"",
    "check-types": "turbo run check-types"
  },
  "devDependencies": {
    "prettier": "^3.5.3",
    "turbo": "^2.5.3",
    "typescript": "5.8.2"
  },
  "engines": {
    "node": ">=18"
  },
  "packageManager": "bun@1.2.13",
  "workspaces": [
    "apps/*",
    "packages/*"
  ]
}
-------------------- END package.json --------------------

-------------------- .gitignore (path: .gitignore) --------------------
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# Dependencies
node_modules
.pnp
.pnp.js

# Local env files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Testing
coverage

# Turbo
.turbo

# Vercel
.vercel

# Build Outputs
.next/
out/
build
dist


# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Misc
.DS_Store
*.pem

apps/api/obj/
apps/api/bin/
*.ico
*.lock
*.woff
-------------------- END .gitignore --------------------

-------------------- button.tsx (path: packages/ui/src/button.tsx) --------------------
"use client";

import { ReactNode } from "react";

interface ButtonProps {
  children: ReactNode;
  className?: string;
  appName: string;
}

export const Button = ({ children, className, appName }: ButtonProps) => {
  return (
    <button
      className={className}
      onClick={() => alert(`Hello from your ${appName} app!`)}
    >
      {children}
    </button>
  );
};
-------------------- END button.tsx --------------------

-------------------- card.tsx (path: packages/ui/src/card.tsx) --------------------
import { type JSX } from "react";

export function Card({
  className,
  title,
  children,
  href,
}: {
  className?: string;
  title: string;
  children: React.ReactNode;
  href: string;
}): JSX.Element {
  return (
    <a
      className={className}
      href={`${href}?utm_source=create-turbo&utm_medium=basic&utm_campaign=create-turbo"`}
      rel="noopener noreferrer"
      target="_blank"
    >
      <h2>
        {title} <span>-&gt;</span>
      </h2>
      <p>{children}</p>
    </a>
  );
}
-------------------- END card.tsx --------------------

-------------------- code.tsx (path: packages/ui/src/code.tsx) --------------------
import { type JSX } from "react";

export function Code({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}): JSX.Element {
  return <code className={className}>{children}</code>;
}
-------------------- END code.tsx --------------------

-------------------- package.json (path: packages/ui/package.json) --------------------
{
  "name": "@repo/ui",
  "version": "0.0.0",
  "private": true,
  "exports": {
    "./*": "./src/*.tsx"
  },
  "scripts": {
    "lint": "eslint . --max-warnings 0",
    "generate:component": "turbo gen react-component",
    "check-types": "tsc --noEmit"
  },
  "devDependencies": {
    "@repo/eslint-config": "*",
    "@repo/typescript-config": "*",
    "@turbo/gen": "^2.5.0",
    "@types/node": "^22.15.3",
    "@types/react": "19.1.0",
    "@types/react-dom": "19.1.1",
    "eslint": "^9.27.0",
    "typescript": "5.8.2"
  },
  "dependencies": {
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  }
}
-------------------- END package.json --------------------

-------------------- tsconfig.json (path: packages/ui/tsconfig.json) --------------------
{
  "extends": "@repo/typescript-config/react-library.json",
  "compilerOptions": {
    "outDir": "dist"
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist"]
}
-------------------- END tsconfig.json --------------------

-------------------- component.hbs (path: packages/ui/turbo/generators/templates/component.hbs) --------------------
export const {{ pascalCase name }} = ({ children }: { children: React.ReactNode }) => {
  return (
    <div>
      <h1>{{ pascalCase name }} Component</h1>
      {children}
    </div>
  );
};
-------------------- END component.hbs --------------------

-------------------- config.ts (path: packages/ui/turbo/generators/config.ts) --------------------
import type { PlopTypes } from "@turbo/gen";

// Learn more about Turborepo Generators at https://turborepo.com/docs/guides/generating-code

export default function generator(plop: PlopTypes.NodePlopAPI): void {
  // A simple generator to add a new React component to the internal UI library
  plop.setGenerator("react-component", {
    description: "Adds a new react component",
    prompts: [
      {
        type: "input",
        name: "name",
        message: "What is the name of the component?",
      },
    ],
    actions: [
      {
        type: "add",
        path: "src/{{kebabCase name}}.tsx",
        templateFile: "templates/component.hbs",
      },
      {
        type: "append",
        path: "package.json",
        pattern: /"exports": {(?<insertion>)/g,
        template: '    "./{{kebabCase name}}": "./src/{{kebabCase name}}.tsx",',
      },
    ],
  });
}
-------------------- END config.ts --------------------

-------------------- eslint.config.mjs (path: packages/ui/eslint.config.mjs) --------------------
import { config } from "@repo/eslint-config/react-internal";

/** @type {import("eslint").Linter.Config} */
export default config;
-------------------- END eslint.config.mjs --------------------

-------------------- package.json (path: packages/eslint-config/package.json) --------------------
{
  "name": "@repo/eslint-config",
  "version": "0.0.0",
  "type": "module",
  "private": true,
  "exports": {
    "./base": "./base.js",
    "./next-js": "./next.js",
    "./react-internal": "./react-internal.js"
  },
  "devDependencies": {
    "@eslint/js": "^9.27.0",
    "@next/eslint-plugin-next": "^15.3.0",
    "eslint": "^9.27.0",
    "eslint-config-prettier": "^10.1.1",
    "eslint-plugin-only-warn": "^1.1.0",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-turbo": "^2.5.0",
    "globals": "^16.2.0",
    "typescript": "^5.8.2",
    "typescript-eslint": "^8.32.0"
  }
}
-------------------- END package.json --------------------

-------------------- base.js (path: packages/eslint-config/base.js) --------------------
import js from "@eslint/js";
import eslintConfigPrettier from "eslint-config-prettier";
import turboPlugin from "eslint-plugin-turbo";
import tseslint from "typescript-eslint";
import onlyWarn from "eslint-plugin-only-warn";

/**
 * A shared ESLint configuration for the repository.
 *
 * @type {import("eslint").Linter.Config[]}
 * */
export const config = [
  js.configs.recommended,
  eslintConfigPrettier,
  ...tseslint.configs.recommended,
  {
    plugins: {
      turbo: turboPlugin,
    },
    rules: {
      "turbo/no-undeclared-env-vars": "warn",
    },
  },
  {
    plugins: {
      onlyWarn,
    },
  },
  {
    ignores: ["dist/**"],
  },
];
-------------------- END base.js --------------------

-------------------- react-internal.js (path: packages/eslint-config/react-internal.js) --------------------
import js from "@eslint/js";
import eslintConfigPrettier from "eslint-config-prettier";
import tseslint from "typescript-eslint";
import pluginReactHooks from "eslint-plugin-react-hooks";
import pluginReact from "eslint-plugin-react";
import globals from "globals";
import { config as baseConfig } from "./base.js";

/**
 * A custom ESLint configuration for libraries that use React.
 *
 * @type {import("eslint").Linter.Config[]} */
export const config = [
  ...baseConfig,
  js.configs.recommended,
  eslintConfigPrettier,
  ...tseslint.configs.recommended,
  pluginReact.configs.flat.recommended,
  {
    languageOptions: {
      ...pluginReact.configs.flat.recommended.languageOptions,
      globals: {
        ...globals.serviceworker,
        ...globals.browser,
      },
    },
  },
  {
    plugins: {
      "react-hooks": pluginReactHooks,
    },
    settings: { react: { version: "detect" } },
    rules: {
      ...pluginReactHooks.configs.recommended.rules,
      // React scope no longer necessary with new JSX transform.
      "react/react-in-jsx-scope": "off",
    },
  },
];
-------------------- END react-internal.js --------------------

-------------------- next.js (path: packages/eslint-config/next.js) --------------------
import js from "@eslint/js";
import eslintConfigPrettier from "eslint-config-prettier";
import tseslint from "typescript-eslint";
import pluginReactHooks from "eslint-plugin-react-hooks";
import pluginReact from "eslint-plugin-react";
import globals from "globals";
import pluginNext from "@next/eslint-plugin-next";
import { config as baseConfig } from "./base.js";

/**
 * A custom ESLint configuration for libraries that use Next.js.
 *
 * @type {import("eslint").Linter.Config[]}
 * */
export const nextJsConfig = [
  ...baseConfig,
  js.configs.recommended,
  eslintConfigPrettier,
  ...tseslint.configs.recommended,
  {
    ...pluginReact.configs.flat.recommended,
    languageOptions: {
      ...pluginReact.configs.flat.recommended.languageOptions,
      globals: {
        ...globals.serviceworker,
      },
    },
  },
  {
    plugins: {
      "@next/next": pluginNext,
    },
    rules: {
      ...pluginNext.configs.recommended.rules,
      ...pluginNext.configs["core-web-vitals"].rules,
    },
  },
  {
    plugins: {
      "react-hooks": pluginReactHooks,
    },
    settings: { react: { version: "detect" } },
    rules: {
      ...pluginReactHooks.configs.recommended.rules,
      // React scope no longer necessary with new JSX transform.
      "react/react-in-jsx-scope": "off",
    },
  },
];
-------------------- END next.js --------------------

-------------------- README.md (path: packages/eslint-config/README.md) --------------------
# `@turbo/eslint-config`

Collection of internal eslint configurations.
-------------------- END README.md --------------------

-------------------- package.json (path: packages/typescript-config/package.json) --------------------
{
  "name": "@repo/typescript-config",
  "version": "0.0.0",
  "private": true,
  "license": "MIT",
  "publishConfig": {
    "access": "public"
  }
}
-------------------- END package.json --------------------

-------------------- nextjs.json (path: packages/typescript-config/nextjs.json) --------------------
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "allowJs": true,
    "jsx": "preserve",
    "noEmit": true
  }
}
-------------------- END nextjs.json --------------------

-------------------- react-library.json (path: packages/typescript-config/react-library.json) --------------------
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    "jsx": "react-jsx"
  }
}
-------------------- END react-library.json --------------------

-------------------- base.json (path: packages/typescript-config/base.json) --------------------
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "incremental": false,
    "isolatedModules": true,
    "lib": ["es2022", "DOM", "DOM.Iterable"],
    "module": "NodeNext",
    "moduleDetection": "force",
    "moduleResolution": "NodeNext",
    "noUncheckedIndexedAccess": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "target": "ES2022"
  }
}
-------------------- END base.json --------------------

-------------------- eslint.config.js (path: apps/web/eslint.config.js) --------------------
import { nextJsConfig } from "@repo/eslint-config/next-js";

/** @type {import("eslint").Linter.Config} */
export default nextJsConfig;
-------------------- END eslint.config.js --------------------

-------------------- next.config.js (path: apps/web/next.config.js) --------------------
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;
-------------------- END next.config.js --------------------

-------------------- package.json (path: apps/web/package.json) --------------------
{
  "name": "web",
  "version": "0.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack --port 3000",
    "build": "next build",
    "start": "next start",
    "lint": "next lint --max-warnings 0",
    "check-types": "tsc --noEmit"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.2.3",
    "@repo/ui": "*",
    "@tailwindcss/postcss": "^4.1.8",
    "@tanstack/react-query": "^5.79.0",
    "@tanstack/react-query-devtools": "^5.79.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.511.0",
    "next": "^15.3.0",
    "postcss": "^8.5.4",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "tailwind-merge": "^3.3.0",
    "tailwindcss": "^4.1.8"
  },
  "devDependencies": {
    "@repo/eslint-config": "*",
    "@repo/typescript-config": "*",
    "@types/node": "^22.15.3",
    "@types/react": "19.1.0",
    "@types/react-dom": "19.1.1",
    "eslint": "^9.27.0",
    "tw-animate-css": "^1.3.2",
    "typescript": "5.8.2"
  }
}
-------------------- END package.json --------------------

-------------------- components.json (path: apps/web/components.json) --------------------
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
-------------------- END components.json --------------------

-------------------- page.module.css (path: apps/web/app/page.module.css) --------------------
.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-synthesis: none;
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  font-family: var(--font-geist-sans);
  border: 1px solid transparent;
  transition: background 0.2s, color 0.2s, border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 180px;
}

button.secondary {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  font-family: var(--font-geist-sans);
  border: 1px solid transparent;
  transition: background 0.2s, color 0.2s, border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
  background: transparent;
  border-color: var(--gray-alpha-200);
  min-width: 180px;
}

.footer {
  font-family: var(--font-geist-sans);
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}
-------------------- END page.module.css --------------------

-------------------- globals.css (path: apps/web/app/globals.css) --------------------
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

.imgDark {
  display: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }

  .imgLight {
    display: none;
  }
  .imgDark {
    display: unset;
  }
}

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.015 286.067);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.21 0.006 285.885);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.705 0.015 286.067);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.552 0.016 285.938);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
-------------------- END globals.css --------------------

-------------------- page.tsx (path: apps/web/app/page.tsx) --------------------
"use client";

import React, { Suspense } from "react";
import styles from "./page.module.css";
import { useGameWebSocket } from "../context/game-socket-provider";
import { CreateJoinRoom } from "../components/create-join-room";
import { Lobby } from "../components/lobby";
import { GameScreen } from "../components/game-screen";
import { useSearchParams } from "next/navigation";

function HomePageContent() {
  const {
    isConnected,
    roomCode,
    error: wsError,
    isGameStarted,
  } = useGameWebSocket();
  const searchParams = useSearchParams();
  const roomCodeFromUrl = searchParams.get("roomCode");

  return (
    <div className={styles.page}>
      <main className={styles.main}>
        <h1>Code Royale</h1>
        {!isConnected && (
          <p style={{ color: "orange" }}>Connecting to server...</p>
        )}
        {wsError && <p style={{ color: "red" }}>Connection Error: {wsError}</p>}

        {isConnected && !roomCode && (
          <CreateJoinRoom initialRoomCode={roomCodeFromUrl || undefined} />
        )}

        {isConnected && roomCode && !isGameStarted && <Lobby />}

        {isConnected && roomCode && isGameStarted && <GameScreen />}
      </main>
    </div>
  );
}

export default function Home() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <HomePageContent />
    </Suspense>
  );
}
-------------------- END page.tsx --------------------

-------------------- layout.tsx (path: apps/web/app/layout.tsx) --------------------
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { GameWebSocketProvider } from "../context/game-socket-provider";
import { TanstackProvider } from "../context/tanstack-provider";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
});

export const metadata: Metadata = {
  title: "Code Royale",
  description: "Online coding battle royale game",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <TanstackProvider>
          <GameWebSocketProvider>{children}</GameWebSocketProvider>
        </TanstackProvider>
      </body>
    </html>
  );
}
-------------------- END layout.tsx --------------------

-------------------- .gitignore (path: apps/web/.gitignore) --------------------
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
-------------------- END .gitignore --------------------

-------------------- tsconfig.json (path: apps/web/tsconfig.json) --------------------
{
  "extends": "@repo/typescript-config/nextjs.json",
  "compilerOptions": {
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    "next-env.d.ts",
    "next.config.js",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
-------------------- END tsconfig.json --------------------

-------------------- game-screen.tsx (path: apps/web/components/game-screen.tsx) --------------------
"use client";

import React from "react";
import { useGameWebSocket, PlayerInfo } from "@/context/game-socket-provider";
import { Button } from "./ui/button";

export const GameScreen: React.FC = () => {
  const {
    playersInGame,
    roomCode,
    playerId,
    playerName,
    error: wsError,
  } = useGameWebSocket();

  if (wsError) {
    return (
      <div style={{ padding: "20px", textAlign: "center", color: "red" }}>
        Error: {wsError}
      </div>
    );
  }

  return (
    <div
      style={{
        padding: "20px",
        textAlign: "center",
        border: "1px solid #444",
        borderRadius: "8px",
        backgroundColor: "rgba(0,0,0,0.2)",
        maxWidth: "800px",
        margin: "20px auto",
      }}
    >
      <h2>Game In Progress! - Room: {roomCode}</h2>
      <p>Player: {playerName || playerId}</p>

      <div style={{ marginTop: "20px" }}>
        <h3>Players Currently In Game: ({playersInGame.length})</h3>
        <ul
          style={{
            listStyleType: "none",
            padding: 0,
            maxHeight: "300px",
            overflowY: "auto",
          }}
        >
          {playersInGame.map((player: PlayerInfo) => (
            <li
              key={player.id}
              style={{
                padding: "10px",
                margin: "5px 0",
                border: "1px solid #555",
                borderRadius: "4px",
                backgroundColor:
                  player.id === playerId
                    ? "hsl(var(--primary)/0.3)"
                    : "hsl(var(--secondary)/0.2)",
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
              }}
            >
              <span>
                {player.name} {player.id === playerId ? "(You)" : ""}
              </span>
              <span>Score: 0</span>
            </li>
          ))}
        </ul>
      </div>

      <div
        style={{
          marginTop: "30px",
          padding: "20px",
          border: "1px dashed #666",
          minHeight: "200px",
        }}
      >
        <p>Game Area - Problems and coding challenges will appear here.</p>
      </div>
    </div>
  );
};
-------------------- END game-screen.tsx --------------------

-------------------- create-join-room.tsx (path: apps/web/components/create-join-room.tsx) --------------------
"use client";

import React, { useState, useEffect } from "react";
import { useMutation } from "@tanstack/react-query";
import { useGameWebSocket } from "../context/game-socket-provider";
import { Button } from "@/components/ui/button";

interface CreateJoinRoomProps {
  initialRoomCode?: string;
}

export const CreateJoinRoom: React.FC<CreateJoinRoomProps> = ({
  initialRoomCode,
}) => {
  const { sendMessage, error, setExternalRoomCode } = useGameWebSocket() as any;
  const [playerName, setPlayerName] = useState("");
  const [inputRoomCode, setInputRoomCode] = useState(initialRoomCode || "");

  useEffect(() => {
    if (initialRoomCode && !inputRoomCode) {
      setInputRoomCode(initialRoomCode.toUpperCase());
    }
  }, [initialRoomCode, inputRoomCode]);

  const createRoomMutation = useMutation({
    mutationFn: async (name: string) => {
      if (!name.trim()) {
        throw new Error("Player name cannot be empty.");
      }
      sendMessage("createRoom", { playerName: name });
    },
    onError: (err: Error) => {
      console.error("Create room error:", err.message);
    },
  });

  const joinRoomMutation = useMutation({
    mutationFn: async (params: { name: string; code: string }) => {
      if (!params.name.trim()) {
        throw new Error("Player name cannot be empty.");
      }
      if (!params.code.trim()) {
        throw new Error("Room code cannot be empty.");
      }
      setExternalRoomCode(params.code);
      sendMessage("joinRoom", {
        playerName: params.name,
        roomCode: params.code,
      });
    },
    onError: (err: Error) => {
      console.error("Join room error:", err.message);
    },
  });

  const handleCreateRoom = () => {
    createRoomMutation.mutate(playerName);
  };

  const handleJoinRoom = () => {
    joinRoomMutation.mutate({ name: playerName, code: inputRoomCode });
  };

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        gap: "20px",
        alignItems: "center",
        padding: "20px",
      }}
    >
      <h2>Code Royale</h2>
      <div>
        <label htmlFor="playerName">Player Name: </label>
        <input
          id="playerName"
          type="text"
          value={playerName}
          onChange={(e) => setPlayerName(e.target.value)}
          placeholder="Enter your name"
          style={{ padding: "8px", marginRight: "10px", color: "black" }}
        />
      </div>

      <div style={{ display: "flex", gap: "10px", alignItems: "center" }}>
        <Button
          onClick={handleCreateRoom}
          disabled={createRoomMutation.isPending || !playerName.trim()}
        >
          {createRoomMutation.isPending ? "Creating..." : "Create Room"}
        </Button>
      </div>

      <div
        style={{
          borderTop: "1px solid #ccc",
          paddingTop: "20px",
          marginTop: "20px",
          width: "100%",
          textAlign: "center",
        }}
      >
        <p>Or Join an Existing Room:</p>
        <input
          type="text"
          value={inputRoomCode}
          onChange={(e) => setInputRoomCode(e.target.value.toUpperCase())}
          placeholder="Enter Room Code"
          maxLength={5}
          style={{ padding: "8px", marginRight: "10px", color: "black" }}
        />
        <Button
          onClick={handleJoinRoom}
          disabled={
            joinRoomMutation.isPending ||
            !playerName.trim() ||
            !inputRoomCode.trim()
          }
        >
          {joinRoomMutation.isPending ? "Joining..." : "Join Room"}
        </Button>
      </div>

      {(createRoomMutation.error || joinRoomMutation.error || error) && (
        <p style={{ color: "red", marginTop: "10px" }}>
          Error:{" "}
          {createRoomMutation.error?.message ||
            joinRoomMutation.error?.message ||
            error}
        </p>
      )}
    </div>
  );
};
-------------------- END create-join-room.tsx --------------------

-------------------- button.tsx (path: apps/web/components/ui/button.tsx) --------------------
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
-------------------- END button.tsx --------------------

-------------------- lobby.tsx (path: apps/web/components/lobby.tsx) --------------------
"use client";

import React, { useState, useEffect } from "react";
import { useGameWebSocket, PlayerInfo } from "../context/game-socket-provider";
import { Button } from "@/components/ui/button";

export const Lobby: React.FC = () => {
  const {
    roomCode,
    playersInLobby,
    playerName,
    playerId,
    hostPlayerId,
    sendMessage,
    isGameStarted,
  } = useGameWebSocket();
  const [shareableLink, setShareableLink] = useState("");
  const [linkCopied, setLinkCopied] = useState(false);

  useEffect(() => {
    if (roomCode && typeof window !== "undefined") {
      setShareableLink(`${window.location.origin}/?roomCode=${roomCode}`);
    }
  }, [roomCode]);

  if (isGameStarted) {
    return null;
  }

  if (!roomCode) {
    return <div>Error: Not in a room.</div>;
  }

  const handleCopyLink = async () => {
    if (navigator.clipboard && shareableLink) {
      try {
        await navigator.clipboard.writeText(shareableLink);
        setLinkCopied(true);
        setTimeout(() => setLinkCopied(false), 2000); // Reset after 2 seconds
      } catch (err) {
        console.error("Failed to copy link: ", err);
        alert("Failed to copy link. Please copy it manually.");
      }
    } else {
      alert("Clipboard API not available. Please copy the link manually.");
    }
  };

  const handleStartGame = () => {
    sendMessage("startGame", {});
  };

  const isHost = playerId === hostPlayerId;

  return (
    <div
      style={{
        padding: "20px",
        border: "1px solid #ccc",
        borderRadius: "8px",
        maxWidth: "500px",
        margin: "20px auto",
        textAlign: "center",
      }}
    >
      <h2>Lobby</h2>
      <p>
        <strong>Welcome, {playerName || playerId}!</strong>
      </p>
      <p>
        Room Code:{" "}
        <strong style={{ fontSize: "1.5em", color: "#007bff" }}>
          {roomCode}
        </strong>
      </p>

      {shareableLink && (
        <div style={{ marginTop: "15px", marginBottom: "15px" }}>
          <p>Share this link to invite others:</p>
          <input
            type="text"
            value={shareableLink}
            readOnly
            style={{
              width: "80%",
              padding: "8px",
              marginRight: "10px",
              color: "black",
              border: "1px solid #ccc",
              borderRadius: "4px",
            }}
            onFocus={(e) => e.target.select()}
          />
          <Button onClick={handleCopyLink} variant="outline" size="sm">
            {linkCopied ? "Copied!" : "Copy Link"}
          </Button>
        </div>
      )}

      <h3 style={{ marginTop: "20px" }}>
        Players in Lobby ({playersInLobby.length}/10):
      </h3>
      <ul style={{ listStyleType: "none", padding: 0 }}>
        {playersInLobby.map((player: PlayerInfo) => (
          <li
            key={player.id}
            style={{
              padding: "5px 0",
              borderBottom: "1px dashed #eee",
              textAlign: "left",
              paddingLeft: "20px",
            }}
          >
            {player.name} {player.id === playerId ? "(You)" : ""}
          </li>
        ))}
      </ul>

      {isHost && playersInLobby.length >= 1 && (
        <Button
          onClick={handleStartGame}
          style={{ marginTop: "20px" }}
          disabled={isGameStarted}
        >
          Start Game
        </Button>
      )}
    </div>
  );
};
-------------------- END lobby.tsx --------------------

-------------------- game-socket-provider.tsx (path: apps/web/context/game-socket-provider.tsx) --------------------
"use client";

import React, {
  createContext,
  useContext,
  useEffect,
  useRef,
  useState,
  useCallback,
} from "react";

export interface PlayerInfo {
  id: string;
  name: string;
}

interface GameWebSocketState {
  isConnected: boolean;
  roomCode: string | null;
  gameId: string | null;
  playerId: string | null;
  playerName: string | null;
  playersInLobby: PlayerInfo[];
  error: string | null;
  sendMessage: (type: string, payload: any) => void;
  isGameStarted: boolean;
  playersInGame: PlayerInfo[];
  hostPlayerId: string | null;
  setExternalRoomCode: (code: string | null) => void;
}

const GameWebSocketContext = createContext<GameWebSocketState | undefined>(
  undefined
);

const WEBSOCKET_URL =
  process.env.NEXT_PUBLIC_WEBSOCKET_URL || "ws://localhost:5217/ws";

export const GameWebSocketProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [isConnected, setIsConnected] = useState(false);
  const [roomCode, setRoomCode] = useState<string | null>(null);
  const [gameId, setGameId] = useState<string | null>(null);
  const [playerId, setPlayerId] = useState<string | null>(null);
  const [playerName, setPlayerNameState] = useState<string | null>(null);
  const [playersInLobby, setPlayersInLobby] = useState<PlayerInfo[]>([]);
  const [error, setError] = useState<string | null>(null);
  const socketRef = useRef<WebSocket | null>(null);

  const [isGameStarted, setIsGameStarted] = useState(false);
  const [playersInGame, setPlayersInGame] = useState<PlayerInfo[]>([]);
  const [hostPlayerId, setHostPlayerId] = useState<string | null>(null);

  const connect = useCallback(() => {
    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
      console.log("WebSocket already open.");
      return;
    }

    console.log(`Attempting to connect to WebSocket at ${WEBSOCKET_URL}...`);
    const socket = new WebSocket(WEBSOCKET_URL);
    socketRef.current = socket;

    socket.onopen = () => {
      console.log("WebSocket connected");
      setIsConnected(true);
      setError(null);
    };

    socket.onmessage = (event) => {
      console.log("WebSocket message received:", event.data);
      try {
        const message = JSON.parse(event.data as string);
        switch (message.type) {
          case "roomCreated":
            setRoomCode(message.payload.roomCode);
            setPlayerId(message.payload.playerId);
            setPlayerNameState(message.payload.playerName);
            setGameId(message.payload.gameId);
            setHostPlayerId(message.payload.hostPlayerId);
            setPlayersInLobby([
              {
                id: message.payload.playerId,
                name: message.payload.playerName,
              },
            ]);
            setIsGameStarted(false);
            setPlayersInGame([]);
            setError(null);
            break;
          case "joinSuccess":
            setPlayerId(message.payload.playerId);
            setPlayerNameState(message.payload.playerName);
            setGameId(message.payload.gameId);
            setHostPlayerId(message.payload.hostPlayerId);
            const selfPlayer: PlayerInfo = {
              id: message.payload.playerId,
              name: message.payload.playerName,
            };
            const otherPlayers = message.payload.playersInLobby as PlayerInfo[];
            setPlayersInLobby([selfPlayer, ...otherPlayers]);
            setIsGameStarted(false);
            setPlayersInGame([]);
            setError(null);
            break;
          case "joinFailed":
            setError(message.payload.reason);
            setRoomCode(null);
            setGameId(null);
            setPlayerId(null);
            break;
          case "playerJoinedLobby":
            setPlayersInLobby((prevPlayers) => {
              if (!prevPlayers.find((p) => p.id === message.payload.playerId)) {
                return [
                  ...prevPlayers,
                  {
                    id: message.payload.playerId,
                    name: message.payload.playerName,
                  },
                ];
              }
              return prevPlayers;
            });
            break;
          case "playerLeftLobby":
            setPlayersInLobby((prevPlayers) =>
              prevPlayers.filter((p) => p.id !== message.payload.playerId)
            );
            if (isGameStarted) {
              setPlayersInGame((prevPlayers) =>
                prevPlayers.filter((p) => p.id !== message.payload.playerId)
              );
            }
            break;
          case "gameStarted":
            setIsGameStarted(true);
            setPlayersInGame(message.payload.playersInGame as PlayerInfo[]);
            setPlayersInLobby([]);
            setError(null);
            break;
          default:
            console.warn("Unhandled WebSocket message type:", message.type);
        }
      } catch (e) {
        console.error("Failed to parse WebSocket message or handle it:", e);
        setError("Received an invalid message from the server.");
      }
    };

    socket.onerror = (err) => {
      console.error("WebSocket error:", err);
      setError(
        "WebSocket connection error. Ensure the server is running and accessible."
      );
      setIsConnected(false);
    };

    socket.onclose = (event) => {
      console.log("WebSocket disconnected:", event.reason, event.code);
      setIsConnected(false);

      setRoomCode(null);
      setGameId(null);
      setPlayerId(null);
      setPlayerNameState(null);
      setPlayersInLobby([]);
      setHostPlayerId(null);
      setIsGameStarted(false);
      setPlayersInGame([]);
      if (!event.wasClean) {
        setError("WebSocket connection closed unexpectedly. Please try again.");
      }
    };
  }, []);

  useEffect(() => {
    connect();
    return () => {
      socketRef.current?.close();
    };
  }, [connect]);

  const sendMessage = (type: string, payload: any) => {
    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
      const message = JSON.stringify({ type, payload });
      console.log("Sending WebSocket message:", message);
      socketRef.current.send(message);
    } else {
      console.error("WebSocket is not connected.");
      setError(
        "Cannot send message: WebSocket is not connected. Please wait or try reconnecting."
      );
      if (
        !socketRef.current ||
        socketRef.current.readyState === WebSocket.CLOSED
      ) {
        console.log(
          "Attempting to reconnect due to send message on closed socket..."
        );
        connect();
      }
    }
  };

  const setExternalRoomCodeCallback = useCallback((code: string | null) => {
    setRoomCode(null);
  }, []);

  const state = {
    isConnected,
    roomCode,
    gameId,
    playerId,
    playerName,
    playersInLobby,
    error,
    sendMessage,
    isGameStarted,
    playersInGame,
    hostPlayerId,
    setExternalRoomCode: setExternalRoomCodeCallback,
  };

  const setExternalRoomCode = (code: string | null) => {
    setRoomCode(code);
  };

  return (
    <GameWebSocketContext.Provider
      value={{ ...state, setExternalRoomCode } as any}
    >
      {children}
    </GameWebSocketContext.Provider>
  );
};

export const useGameWebSocket = () => {
  const context = useContext(GameWebSocketContext);
  if (context === undefined) {
    throw new Error(
      "useGameWebSocket must be used within a GameWebSocketProvider"
    );
  }
  return context;
};
-------------------- END game-socket-provider.tsx --------------------

-------------------- tanstack-provider.tsx (path: apps/web/context/tanstack-provider.tsx) --------------------
"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import React, { useState } from "react";

export const TanstackProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [queryClient] = useState(() => new QueryClient());

  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
};
-------------------- END tanstack-provider.tsx --------------------

-------------------- next-env.d.ts (path: apps/web/next-env.d.ts) --------------------
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
-------------------- END next-env.d.ts --------------------

-------------------- next.svg (path: apps/web/public/next.svg) --------------------
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
-------------------- END next.svg --------------------

-------------------- turborepo-light.svg (path: apps/web/public/turborepo-light.svg) --------------------
<svg width="473" height="76" viewBox="0 0 473 76" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M130.998 30.6566V22.3773H91.0977V30.6566H106.16V58.1876H115.935V30.6566H130.998Z" fill="white"/>
<path d="M153.542 58.7362C165.811 58.7362 172.544 52.5018 172.544 42.2276V22.3773H162.768V41.2799C162.768 47.0156 159.776 50.2574 153.542 50.2574C147.307 50.2574 144.315 47.0156 144.315 41.2799V22.3773H134.539V42.2276C134.539 52.5018 141.272 58.7362 153.542 58.7362Z" fill="white"/>
<path d="M187.508 46.3173H197.234L204.914 58.1876H216.136L207.458 45.2699C212.346 43.5243 215.338 39.6341 215.338 34.3473C215.338 26.6666 209.603 22.3773 200.874 22.3773H177.732V58.1876H187.508V46.3173ZM187.508 38.5867V30.5568H200.376C203.817 30.5568 205.712 32.0531 205.712 34.5967C205.712 36.9907 203.817 38.5867 200.376 38.5867H187.508Z" fill="white"/>
<path d="M219.887 58.1876H245.472C253.452 58.1876 258.041 54.3971 258.041 48.0629C258.041 43.8236 255.348 40.9308 252.156 39.6341C254.35 38.5867 257.043 36.0929 257.043 32.1528C257.043 25.8187 252.555 22.3773 244.625 22.3773H219.887V58.1876ZM229.263 36.3922V30.3074H243.627C246.32 30.3074 247.817 31.3548 247.817 33.3498C247.817 35.3448 246.32 36.3922 243.627 36.3922H229.263ZM229.263 43.7238H244.525C247.168 43.7238 248.615 45.0206 248.615 46.9657C248.615 48.9108 247.168 50.2076 244.525 50.2076H229.263V43.7238Z" fill="white"/>
<path d="M281.942 21.7788C269.423 21.7788 260.396 29.6092 260.396 40.2824C260.396 50.9557 269.423 58.7861 281.942 58.7861C294.461 58.7861 303.438 50.9557 303.438 40.2824C303.438 29.6092 294.461 21.7788 281.942 21.7788ZM281.942 30.2576C288.525 30.2576 293.463 34.1478 293.463 40.2824C293.463 46.4171 288.525 50.3073 281.942 50.3073C275.359 50.3073 270.421 46.4171 270.421 40.2824C270.421 34.1478 275.359 30.2576 281.942 30.2576Z" fill="white"/>
<path d="M317.526 46.3173H327.251L334.932 58.1876H346.154L337.476 45.2699C342.364 43.5243 345.356 39.6341 345.356 34.3473C345.356 26.6666 339.62 22.3773 330.892 22.3773H307.75V58.1876H317.526V46.3173ZM317.526 38.5867V30.5568H330.394C333.835 30.5568 335.73 32.0531 335.73 34.5967C335.73 36.9907 333.835 38.5867 330.394 38.5867H317.526Z" fill="white"/>
<path d="M349.904 22.3773V58.1876H384.717V49.9083H359.48V44.0729H381.874V35.9932H359.48V30.6566H384.717V22.3773H349.904Z" fill="white"/>
<path d="M399.204 46.7662H412.221C420.95 46.7662 426.685 42.5767 426.685 34.5967C426.685 26.5668 420.95 22.3773 412.221 22.3773H389.428V58.1876H399.204V46.7662ZM399.204 38.6366V30.5568H411.673C415.164 30.5568 417.059 32.0531 417.059 34.5967C417.059 37.0904 415.164 38.6366 411.673 38.6366H399.204Z" fill="white"/>
<path d="M450.948 21.7788C438.43 21.7788 429.402 29.6092 429.402 40.2824C429.402 50.9557 438.43 58.7861 450.948 58.7861C463.467 58.7861 472.444 50.9557 472.444 40.2824C472.444 29.6092 463.467 21.7788 450.948 21.7788ZM450.948 30.2576C457.532 30.2576 462.469 34.1478 462.469 40.2824C462.469 46.4171 457.532 50.3073 450.948 50.3073C444.365 50.3073 439.427 46.4171 439.427 40.2824C439.427 34.1478 444.365 30.2576 450.948 30.2576Z" fill="white"/>
<path d="M38.5017 18.0956C27.2499 18.0956 18.0957 27.2498 18.0957 38.5016C18.0957 49.7534 27.2499 58.9076 38.5017 58.9076C49.7535 58.9076 58.9077 49.7534 58.9077 38.5016C58.9077 27.2498 49.7535 18.0956 38.5017 18.0956ZM38.5017 49.0618C32.6687 49.0618 27.9415 44.3346 27.9415 38.5016C27.9415 32.6686 32.6687 27.9414 38.5017 27.9414C44.3347 27.9414 49.0619 32.6686 49.0619 38.5016C49.0619 44.3346 44.3347 49.0618 38.5017 49.0618Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M40.2115 14.744V7.125C56.7719 8.0104 69.9275 21.7208 69.9275 38.5016C69.9275 55.2824 56.7719 68.989 40.2115 69.8782V62.2592C52.5539 61.3776 62.3275 51.0644 62.3275 38.5016C62.3275 25.9388 52.5539 15.6256 40.2115 14.744ZM20.5048 54.0815C17.233 50.3043 15.124 45.4935 14.7478 40.2115H7.125C7.5202 47.6025 10.4766 54.3095 15.1088 59.4737L20.501 54.0815H20.5048ZM36.7916 69.8782V62.2592C31.5058 61.883 26.695 59.7778 22.9178 56.5022L17.5256 61.8944C22.6936 66.5304 29.4006 69.483 36.7878 69.8782H36.7916Z" fill="url(#paint0_linear_2028_477)"/>
<defs>
<linearGradient id="paint0_linear_2028_477" x1="41.443" y1="11.5372" x2="10.5567" y2="42.4236" gradientUnits="userSpaceOnUse">
<stop stop-color="#0096FF"/>
<stop offset="1" stop-color="#FF1E56"/>
</linearGradient>
</defs>
</svg>
-------------------- END turborepo-light.svg --------------------

-------------------- window.svg (path: apps/web/public/window.svg) --------------------
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5H14.5V12.5C14.5 13.0523 14.0523 13.5 13.5 13.5H2.5C1.94772 13.5 1.5 13.0523 1.5 12.5V2.5ZM0 1H1.5H14.5H16V2.5V12.5C16 13.8807 14.8807 15 13.5 15H2.5C1.11929 15 0 13.8807 0 12.5V2.5V1ZM3.75 5.5C4.16421 5.5 4.5 5.16421 4.5 4.75C4.5 4.33579 4.16421 4 3.75 4C3.33579 4 3 4.33579 3 4.75C3 5.16421 3.33579 5.5 3.75 5.5ZM7 4.75C7 5.16421 6.66421 5.5 6.25 5.5C5.83579 5.5 5.5 5.16421 5.5 4.75C5.5 4.33579 5.83579 4 6.25 4C6.66421 4 7 4.33579 7 4.75ZM8.75 5.5C9.16421 5.5 9.5 5.16421 9.5 4.75C9.5 4.33579 9.16421 4 8.75 4C8.33579 4 8 4.33579 8 4.75C8 5.16421 8.33579 5.5 8.75 5.5Z" fill="#666666"/>
</svg>
-------------------- END window.svg --------------------

-------------------- vercel.svg (path: apps/web/public/vercel.svg) --------------------
<svg width="21" height="20" viewBox="0 0 21 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_977_547)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M10.5 3L18.5 17H2.5L10.5 3Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_977_547">
<rect width="16" height="16" fill="white" transform="translate(2.5 2)"/>
</clipPath>
</defs>
</svg>
-------------------- END vercel.svg --------------------

-------------------- file-text.svg (path: apps/web/public/file-text.svg) --------------------
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.5 13.5V6.5V5.41421C14.5 5.149 14.3946 4.89464 14.2071 4.70711L9.79289 0.292893C9.60536 0.105357 9.351 0 9.08579 0H8H3H1.5V1.5V13.5C1.5 14.8807 2.61929 16 4 16H12C13.3807 16 14.5 14.8807 14.5 13.5ZM13 13.5V6.5H9.5H8V5V1.5H3V13.5C3 14.0523 3.44772 14.5 4 14.5H12C12.5523 14.5 13 14.0523 13 13.5ZM9.5 5V2.12132L12.3787 5H9.5ZM5.13 5.00062H4.505V6.25062H5.13H6H6.625V5.00062H6H5.13ZM4.505 8H5.13H11H11.625V9.25H11H5.13H4.505V8ZM5.13 11H4.505V12.25H5.13H11H11.625V11H11H5.13Z" fill="#666666"/>
</svg>
-------------------- END file-text.svg --------------------

-------------------- globe.svg (path: apps/web/public/globe.svg) --------------------
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_868_525)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M10.268 14.0934C11.9051 13.4838 13.2303 12.2333 13.9384 10.6469C13.1192 10.7941 12.2138 10.9111 11.2469 10.9925C11.0336 12.2005 10.695 13.2621 10.268 14.0934ZM8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16ZM8.48347 14.4823C8.32384 14.494 8.16262 14.5 8 14.5C7.83738 14.5 7.67616 14.494 7.51654 14.4823C7.5132 14.4791 7.50984 14.4759 7.50647 14.4726C7.2415 14.2165 6.94578 13.7854 6.67032 13.1558C6.41594 12.5744 6.19979 11.8714 6.04101 11.0778C6.67605 11.1088 7.33104 11.125 8 11.125C8.66896 11.125 9.32395 11.1088 9.95899 11.0778C9.80021 11.8714 9.58406 12.5744 9.32968 13.1558C9.05422 13.7854 8.7585 14.2165 8.49353 14.4726C8.49016 14.4759 8.4868 14.4791 8.48347 14.4823ZM11.4187 9.72246C12.5137 9.62096 13.5116 9.47245 14.3724 9.28806C14.4561 8.87172 14.5 8.44099 14.5 8C14.5 7.55901 14.4561 7.12828 14.3724 6.71194C13.5116 6.52755 12.5137 6.37904 11.4187 6.27753C11.4719 6.83232 11.5 7.40867 11.5 8C11.5 8.59133 11.4719 9.16768 11.4187 9.72246ZM10.1525 6.18401C10.2157 6.75982 10.25 7.36805 10.25 8C10.25 8.63195 10.2157 9.24018 10.1525 9.81598C9.46123 9.85455 8.7409 9.875 8 9.875C7.25909 9.875 6.53877 9.85455 5.84749 9.81598C5.7843 9.24018 5.75 8.63195 5.75 8C5.75 7.36805 5.7843 6.75982 5.84749 6.18401C6.53877 6.14545 7.25909 6.125 8 6.125C8.74091 6.125 9.46123 6.14545 10.1525 6.18401ZM11.2469 5.00748C12.2138 5.08891 13.1191 5.20593 13.9384 5.35306C13.2303 3.7667 11.9051 2.51622 10.268 1.90662C10.695 2.73788 11.0336 3.79953 11.2469 5.00748ZM8.48347 1.51771C8.4868 1.52089 8.49016 1.52411 8.49353 1.52737C8.7585 1.78353 9.05422 2.21456 9.32968 2.84417C9.58406 3.42562 9.80021 4.12856 9.95899 4.92219C9.32395 4.89118 8.66896 4.875 8 4.875C7.33104 4.875 6.67605 4.89118 6.04101 4.92219C6.19978 4.12856 6.41594 3.42562 6.67032 2.84417C6.94578 2.21456 7.2415 1.78353 7.50647 1.52737C7.50984 1.52411 7.51319 1.52089 7.51653 1.51771C7.67615 1.50597 7.83738 1.5 8 1.5C8.16262 1.5 8.32384 1.50597 8.48347 1.51771ZM5.73202 1.90663C4.0949 2.51622 2.76975 3.7667 2.06159 5.35306C2.88085 5.20593 3.78617 5.08891 4.75309 5.00748C4.96639 3.79953 5.30497 2.73788 5.73202 1.90663ZM4.58133 6.27753C3.48633 6.37904 2.48837 6.52755 1.62761 6.71194C1.54392 7.12828 1.5 7.55901 1.5 8C1.5 8.44099 1.54392 8.87172 1.62761 9.28806C2.48837 9.47245 3.48633 9.62096 4.58133 9.72246C4.52807 9.16768 4.5 8.59133 4.5 8C4.5 7.40867 4.52807 6.83232 4.58133 6.27753ZM4.75309 10.9925C3.78617 10.9111 2.88085 10.7941 2.06159 10.6469C2.76975 12.2333 4.0949 13.4838 5.73202 14.0934C5.30497 13.2621 4.96639 12.2005 4.75309 10.9925Z" fill="#666666"/>
</g>
<defs>
<clipPath id="clip0_868_525">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
-------------------- END globe.svg --------------------

-------------------- turborepo-dark.svg (path: apps/web/public/turborepo-dark.svg) --------------------
<svg width="473" height="76" viewBox="0 0 473 76" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M130.998 30.6565V22.3773H91.0977V30.6565H106.16V58.1875H115.935V30.6565H130.998Z" fill="black"/>
<path d="M153.542 58.7362C165.811 58.7362 172.544 52.5018 172.544 42.2275V22.3773H162.768V41.2799C162.768 47.0155 159.776 50.2574 153.542 50.2574C147.307 50.2574 144.315 47.0155 144.315 41.2799V22.3773H134.539V42.2275C134.539 52.5018 141.272 58.7362 153.542 58.7362Z" fill="black"/>
<path d="M187.508 46.3173H197.234L204.914 58.1875H216.136L207.458 45.2699C212.346 43.5243 215.338 39.634 215.338 34.3473C215.338 26.6665 209.603 22.3773 200.874 22.3773H177.732V58.1875H187.508V46.3173ZM187.508 38.5867V30.5568H200.376C203.817 30.5568 205.712 32.053 205.712 34.5967C205.712 36.9907 203.817 38.5867 200.376 38.5867H187.508Z" fill="black"/>
<path d="M219.887 58.1875H245.472C253.452 58.1875 258.041 54.397 258.041 48.0629C258.041 43.8235 255.348 40.9308 252.156 39.634C254.35 38.5867 257.043 36.0929 257.043 32.1528C257.043 25.8187 252.555 22.3773 244.625 22.3773H219.887V58.1875ZM229.263 36.3922V30.3074H243.627C246.32 30.3074 247.817 31.3548 247.817 33.3498C247.817 35.3448 246.32 36.3922 243.627 36.3922H229.263ZM229.263 43.7238H244.525C247.168 43.7238 248.615 45.0205 248.615 46.9657C248.615 48.9108 247.168 50.2075 244.525 50.2075H229.263V43.7238Z" fill="black"/>
<path d="M281.942 21.7788C269.423 21.7788 260.396 29.6092 260.396 40.2824C260.396 50.9557 269.423 58.786 281.942 58.786C294.461 58.786 303.438 50.9557 303.438 40.2824C303.438 29.6092 294.461 21.7788 281.942 21.7788ZM281.942 30.2575C288.525 30.2575 293.463 34.1478 293.463 40.2824C293.463 46.417 288.525 50.3073 281.942 50.3073C275.359 50.3073 270.421 46.417 270.421 40.2824C270.421 34.1478 275.359 30.2575 281.942 30.2575Z" fill="black"/>
<path d="M317.526 46.3173H327.251L334.932 58.1875H346.154L337.476 45.2699C342.364 43.5243 345.356 39.634 345.356 34.3473C345.356 26.6665 339.62 22.3773 330.892 22.3773H307.75V58.1875H317.526V46.3173ZM317.526 38.5867V30.5568H330.394C333.835 30.5568 335.73 32.053 335.73 34.5967C335.73 36.9907 333.835 38.5867 330.394 38.5867H317.526Z" fill="black"/>
<path d="M349.904 22.3773V58.1875H384.717V49.9083H359.48V44.0729H381.874V35.9932H359.48V30.6565H384.717V22.3773H349.904Z" fill="black"/>
<path d="M399.204 46.7662H412.221C420.95 46.7662 426.685 42.5767 426.685 34.5967C426.685 26.5668 420.95 22.3773 412.221 22.3773H389.428V58.1875H399.204V46.7662ZM399.204 38.6365V30.5568H411.673C415.164 30.5568 417.059 32.053 417.059 34.5967C417.059 37.0904 415.164 38.6365 411.673 38.6365H399.204Z" fill="black"/>
<path d="M450.948 21.7788C438.43 21.7788 429.402 29.6092 429.402 40.2824C429.402 50.9557 438.43 58.786 450.948 58.786C463.467 58.786 472.444 50.9557 472.444 40.2824C472.444 29.6092 463.467 21.7788 450.948 21.7788ZM450.948 30.2575C457.532 30.2575 462.469 34.1478 462.469 40.2824C462.469 46.417 457.532 50.3073 450.948 50.3073C444.365 50.3073 439.427 46.417 439.427 40.2824C439.427 34.1478 444.365 30.2575 450.948 30.2575Z" fill="black"/>
<path d="M38.5017 18.0956C27.2499 18.0956 18.0957 27.2498 18.0957 38.5016C18.0957 49.7534 27.2499 58.9076 38.5017 58.9076C49.7535 58.9076 58.9077 49.7534 58.9077 38.5016C58.9077 27.2498 49.7535 18.0956 38.5017 18.0956ZM38.5017 49.0618C32.6687 49.0618 27.9415 44.3346 27.9415 38.5016C27.9415 32.6686 32.6687 27.9414 38.5017 27.9414C44.3347 27.9414 49.0619 32.6686 49.0619 38.5016C49.0619 44.3346 44.3347 49.0618 38.5017 49.0618Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M40.2115 14.744V7.125C56.7719 8.0104 69.9275 21.7208 69.9275 38.5016C69.9275 55.2824 56.7719 68.989 40.2115 69.8782V62.2592C52.5539 61.3776 62.3275 51.0644 62.3275 38.5016C62.3275 25.9388 52.5539 15.6256 40.2115 14.744ZM20.5048 54.0815C17.233 50.3043 15.124 45.4935 14.7478 40.2115H7.125C7.5202 47.6025 10.4766 54.3095 15.1088 59.4737L20.501 54.0815H20.5048ZM36.7916 69.8782V62.2592C31.5058 61.883 26.695 59.7778 22.9178 56.5022L17.5256 61.8944C22.6936 66.5304 29.4006 69.483 36.7878 69.8782H36.7916Z" fill="url(#paint0_linear_2028_278)"/>
<defs>
<linearGradient id="paint0_linear_2028_278" x1="41.443" y1="11.5372" x2="10.5567" y2="42.4236" gradientUnits="userSpaceOnUse">
<stop stop-color="#0096FF"/>
<stop offset="1" stop-color="#FF1E56"/>
</linearGradient>
</defs>
</svg>
-------------------- END turborepo-dark.svg --------------------

-------------------- postcss.config.mjs (path: apps/web/postcss.config.mjs) --------------------
const config = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};
export default config;
-------------------- END postcss.config.mjs --------------------

-------------------- README.md (path: apps/web/README.md) --------------------
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
-------------------- END README.md --------------------

-------------------- utils.ts (path: apps/web/lib/utils.ts) --------------------
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
-------------------- END utils.ts --------------------

-------------------- Player.cs (path: apps/api/Models/Player.cs) --------------------
using System.Net.WebSockets;

namespace MyCsApi.Models
{
    public class Player
    {
        public string PlayerId { get; }
        public string Name { get; set; }
        public WebSocket Socket { get; }
        public string CurrentRoomCode { get; set; }

        public Player(string playerId, string name, WebSocket socket, string roomCode)
        {
            PlayerId = playerId;
            Name = name;
            Socket = socket;
            CurrentRoomCode = roomCode;
        }
    }
}
-------------------- END Player.cs --------------------

-------------------- GameRoom.cs (path: apps/api/Models/GameRoom.cs) --------------------
using System.Collections.Generic;
using System.Linq;

namespace MyCsApi.Models
{
    public class GameRoom
    {
        public string RoomCode { get; }
        public string GameId { get; }
        public string HostPlayerId { get; private set; }
        public string GameState { get; set; } = "Lobby";
        private readonly List<Player> _players = new();
        public IReadOnlyCollection<Player> Players => _players.AsReadOnly();

        public GameRoom(string roomCode, string gameId, string hostPlayerId)
        {
            RoomCode = roomCode;
            GameId = gameId;
            HostPlayerId = hostPlayerId;
        }

        public void AddPlayer(Player player)
        {
            if (!_players.Any(p => p.PlayerId == player.PlayerId))
            {
                _players.Add(player);
            }
        }

        public void RemovePlayer(Player player)
        {
            _players.RemoveAll(p => p.PlayerId == player.PlayerId);
        }
        public void RemovePlayer(string playerId)
        {
            _players.RemoveAll(p => p.PlayerId == playerId);
        }
    }
}
-------------------- END GameRoom.cs --------------------

-------------------- WebSocketMessages.cs (path: apps/api/Models/WebSocketMessages.cs) --------------------
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace MyCsApi.Models
{
    public record BaseWebSocketMessage(string Type);

    public record CreateRoomClientPayload(string PlayerName);
    public record CreateRoomClientMessage(string Type, CreateRoomClientPayload Payload) : BaseWebSocketMessage(Type);

    public record JoinRoomClientPayload(string PlayerName, string RoomCode);
    public record JoinRoomClientMessage(string Type, JoinRoomClientPayload Payload) : BaseWebSocketMessage(Type);

    public record StartGameClientPayload();
    public record StartGameClientMessage(string Type, StartGameClientPayload Payload) : BaseWebSocketMessage(Type)
    {
        public StartGameClientMessage() : this("startGame", new StartGameClientPayload()) { }
    }


    public record PlayerInfo(string Id, string Name);

    public record RoomCreatedServerPayload(string RoomCode, string PlayerId, string PlayerName, string GameId, string HostPlayerId);
    public record RoomCreatedServerMessage(string Type, RoomCreatedServerPayload Payload) : BaseWebSocketMessage(Type)
    {
        public RoomCreatedServerMessage(string roomCode, string playerId, string playerName, string gameId, string hostPlayerId)
            : this("roomCreated", new RoomCreatedServerPayload(roomCode, playerId, playerName, gameId, hostPlayerId)) { }
    }

    public record JoinSuccessServerPayload(string PlayerId, string PlayerName, string GameId, List<PlayerInfo> PlayersInLobby, string HostPlayerId);
    public record JoinSuccessServerMessage(string Type, JoinSuccessServerPayload Payload) : BaseWebSocketMessage(Type)
    {
        public JoinSuccessServerMessage(string playerId, string playerName, string gameId, List<PlayerInfo> playersInLobby, string hostPlayerId)
            : this("joinSuccess", new JoinSuccessServerPayload(playerId, playerName, gameId, playersInLobby, hostPlayerId)) { }
    }

    public record JoinFailedServerPayload(string Reason);
    public record JoinFailedServerMessage(string Type, JoinFailedServerPayload Payload) : BaseWebSocketMessage(Type)
    {
        public JoinFailedServerMessage(string reason) : this("joinFailed", new JoinFailedServerPayload(reason)) { }
    }

    public record PlayerJoinedLobbyServerPayload(string PlayerId, string PlayerName);
    public record PlayerJoinedLobbyServerMessage(string Type, PlayerJoinedLobbyServerPayload Payload) : BaseWebSocketMessage(Type)
    {
        public PlayerJoinedLobbyServerMessage(string playerId, string playerName)
            : this("playerJoinedLobby", new PlayerJoinedLobbyServerPayload(playerId, playerName)) { }
    }

    public record PlayerLeftLobbyServerPayload(string PlayerId, string PlayerName);
    public record PlayerLeftLobbyServerMessage(string Type, PlayerLeftLobbyServerPayload Payload) : BaseWebSocketMessage(Type)
    {
        public PlayerLeftLobbyServerMessage(string playerId, string playerName)
           : this("playerLeftLobby", new PlayerLeftLobbyServerPayload(playerId, playerName)) { }
    }

    public record GameStartedServerPayload(List<PlayerInfo> PlayersInGame);
    public record GameStartedServerMessage(string Type, GameStartedServerPayload Payload) : BaseWebSocketMessage(Type)
    {
        public GameStartedServerMessage(List<PlayerInfo> playersInGame)
            : this("gameStarted", new GameStartedServerPayload(playersInGame)) { }
    }

    
    public record UseCardPayload(string CardName, string PlayerId, string TargetPlayerId);

    public record UseCardMessage(string Type, UseCardPayload Payload) : BaseWebSocketMessage(Type)
    {
        public UseCardMessage(string cardName, string playerId, string targetPlayerId) 
            : this("useCard", new UseCardPayload(cardName, playerId, targetPlayerId)) { }
    }

    public record NewProblemPayload(string ProblemName, string ProblemInfo);

    public record NewProblemMessage(string Type, NewProblemPayload Payload) : BaseWebSocketMessage(Type)
    {
        public NewProblemMessage(string problemName, string problemInfo)
            : this("newProblem", new NewProblemPayload(problemName, problemInfo)) { }
    }

    public record PlayerStateUpdatePayload(string PlayerId, string[] cards);
    public record PlayerStateUpdateMessage(string Type, PlayerStateUpdatePayload Payload) : BaseWebSocketMessage(Type)
    {
        public PlayerStateUpdateMessage(string playerId, string[] cards)
            : this("playerStateUpdate", new PlayerStateUpdatePayload(playerId, cards)) { }
    }

    public record PlayerEliminatedPayload(string PlayerId, string PlayerName, string Reason);
    public record PlayerEliminatedMessage(string Type, PlayerEliminatedPayload Payload) : BaseWebSocketMessage(Type)
    {
        public PlayerEliminatedMessage(string playerId, string playerName, string reason)
            : this("playerEliminated", new PlayerEliminatedPayload(playerId, playerName, reason)) { }
    }

    public record GameOverPayload(string PlayerId, string PlayerName);
    public record GameOverMessage(string Type, GameOverPayload Payload) : BaseWebSocketMessage(Type)
    {
        public GameOverMessage(string playerId, string playerName)
            : this("gameOver", new GameOverPayload(playerId, playerName)) { }
    }

    public record StartGamePayload();

    public record StartGameMessage(string Type, StartGamePayload Payload) : BaseWebSocketMessage(Type)
    {
        public StartGameMessage() :
            this("startGame", new StartGamePayload())
        { }
    }
    
    public record PlayerSolvedPayload(string PlayerName, string PlayerId);

    public record PlayerSolvedMessage(string Type, PlayerSolvedPayload Payload) : BaseWebSocketMessage(Type)
    {
        public PlayerSolvedMessage(string playerName, string playerId)
            : this("playerSolved", new PlayerSolvedPayload(playerName, playerId)) { }
    }
}
-------------------- END WebSocketMessages.cs --------------------

-------------------- package.json (path: apps/api/package.json) --------------------
{
  "name": "api",
  "module": "index.ts",
  "type": "module",
  "private": true,
  "scripts": {
    "clean": "dotnet clean",
    "build": "dotnet build",
    "dev": "dotnet watch run",
    "start": "dotnet run --launch-profile Production"
  },
  "devDependencies": {
    "@types/bun": "latest"
  },
  "peerDependencies": {
    "typescript": "^5"
  }
}
-------------------- END package.json --------------------

-------------------- GameController.cs (path: apps/api/Controllers/GameController.cs) --------------------
using Microsoft.AspNetCore.Mvc;

namespace MyCsApi.Controllers;

[ApiController]
[Route("[controller]")]
public class GameController : ControllerBase
{
    [HttpGet("health")]
    public IActionResult HealthCheck()
    {
        return Ok(new { status = "API is healthy" });
    }
}
-------------------- END GameController.cs --------------------

-------------------- MyCsApi.csproj (path: apps/api/MyCsApi.csproj) --------------------
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.4" />
  </ItemGroup>

</Project>
-------------------- END MyCsApi.csproj --------------------

-------------------- .gitignore (path: apps/api/.gitignore) --------------------
# dependencies (bun install)
node_modules

# output
out
dist
*.tgz

# code coverage
coverage
*.lcov

# logs
logs
_.log
report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# caches
.eslintcache
.cache
*.tsbuildinfo

# IntelliJ based IDEs
.idea

# Finder (MacOS) folder config
.DS_Store
-------------------- END .gitignore --------------------

-------------------- Item.cs (path: apps/api/Item.cs) --------------------
namespace MyCsApi;

public class Item
{
    
}
-------------------- END Item.cs --------------------

-------------------- tsconfig.json (path: apps/api/tsconfig.json) --------------------
{
  "compilerOptions": {
    // Environment setup & latest features
    "lib": ["ESNext"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "jsx": "react-jsx",
    "allowJs": true,

    // Bundler mode
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    // Best practices
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,

    // Some stricter flags (disabled by default)
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noPropertyAccessFromIndexSignature": false
  }
}
-------------------- END tsconfig.json --------------------

-------------------- MyCsApi.http (path: apps/api/MyCsApi.http) --------------------
@MyCsApi_HostAddress = http://localhost:5217

GET {{MyCsApi_HostAddress}}/weatherforecast/
Accept: application/json

###
-------------------- END MyCsApi.http --------------------

-------------------- launchSettings.json (path: apps/api/Properties/launchSettings.json) --------------------
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "http://localhost:5217",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "https://localhost:7007;http://localhost:5217",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
-------------------- END launchSettings.json --------------------

-------------------- Program.cs (path: apps/api/Program.cs) --------------------
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using MyCsApi.Services;
using MyCsApi.WebSockets;

var builder = WebApplication.CreateBuilder(args);

var myAllowAllOriginsPolicy = "_myAllowAllOriginsPolicy";

builder.Services.AddCors(options =>
{
    options.AddPolicy(name: myAllowAllOriginsPolicy, policy =>
    {
        policy.WithOrigins("http://localhost:3000")
              .AllowAnyHeader()
              .AllowAnyMethod()
              .AllowCredentials();
    });
});

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSingleton<IRoomManager, RoomManager>();
builder.Services.AddSingleton<ICardManager, CardManager>();
builder.Services.AddSingleton<WebSocketMessageHandler>();


var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    // app.MapOpenApi(); 
}

app.UseHttpsRedirection();
app.UseCors(myAllowAllOriginsPolicy);
app.UseAuthorization();
app.MapControllers();

app.UseWebSockets(new WebSocketOptions
{
    KeepAliveInterval = TimeSpan.FromSeconds(120),
});

app.Map("/ws", async context =>
{
    if (context.WebSockets.IsWebSocketRequest)
    {
        using var webSocket = await context.WebSockets.AcceptWebSocketAsync();
        var handler = app.Services.GetRequiredService<WebSocketMessageHandler>();
        await handler.HandleWebSocketAsync(webSocket);
    }
    else
    {
        context.Response.StatusCode = StatusCodes.Status400BadRequest;
    }
});

app.Run();
-------------------- END Program.cs --------------------

-------------------- appsettings.json (path: apps/api/appsettings.json) --------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
-------------------- END appsettings.json --------------------

-------------------- appsettings.Development.json (path: apps/api/appsettings.Development.json) --------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
-------------------- END appsettings.Development.json --------------------

-------------------- index.ts (path: apps/api/index.ts) --------------------
// console.log("Hello via Bun!");
-------------------- END index.ts --------------------

-------------------- CardManager.cs (path: apps/api/Services/CardManager.cs) --------------------
using System.Collections.Concurrent;
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using MyCsApi.Models;

namespace MyCsApi.Services;

public interface ICardManager
{
    public Task UseCardAsync(WebSocket webSocket, string playerId, string cardName, string targetPlayerId);
}

public class CardManager : ICardManager
{
    private readonly ILogger<CardManager> _logger;
    private readonly ConcurrentDictionary<string, Player> _players;

    public CardManager(ILogger<CardManager> logger, IRoomManager roomManager)
    {
        _logger = logger;
        _players = roomManager.GetPlayers();
    }

    public async Task UseCardAsync(WebSocket webSocket, string playerId, string cardName, string targetPlayerId)
    {
        switch (cardName)
        {
            case "Attack":
                await SendPlayerUpdateMessageAsync(webSocket, playerId, targetPlayerId, 20, cardName);
                break;
            default:
                break;
        }
        
    }
    
    private async Task SendPlayerUpdateMessageAsync(WebSocket webSocket, string playerId, string targetPlayerId, int dHp, string cardName)
    {
        if (webSocket.State == WebSocketState.Open)
        {
            var messageJson = $"{{\"playerId\": \"{targetPlayerId}\", \"hp\": \"{dHp}\", \"cardName\": \"{cardName}\"}}";
            var bytes = Encoding.UTF8.GetBytes(messageJson);
            await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);
            _logger.LogDebug($"Sent message: {messageJson}");
        }
    }
}
-------------------- END CardManager.cs --------------------

-------------------- RoomManager.cs (path: apps/api/Services/RoomManager.cs) --------------------
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using MyCsApi.Models;

namespace MyCsApi.Services
{
    public interface IRoomManager
    {
        public Task CreateRoomAsync(WebSocket webSocket, string playerId, string playerName);
        public Task JoinRoomAsync(WebSocket webSocket, string playerId, string playerName, string roomCode);
        public Task PlayerDisconnectedAsync(string playerId, WebSocket webSocket);
        public ConcurrentDictionary<string, Player> GetPlayers();
    }
    public class RoomManager : IRoomManager
    {
        private readonly ConcurrentDictionary<string, GameRoom> _rooms = new();
        private readonly ConcurrentDictionary<string, Player> _players = new();
        private readonly ILogger<RoomManager> _logger;
        private static readonly JsonSerializerOptions _jsonSerializerOptions = new()
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };


        public RoomManager(ILogger<RoomManager> logger)
        {
            _logger = logger;
        }

        public ConcurrentDictionary<string, Player> GetPlayers()
        {
            return _players;
        }

        private string GenerateRoomCode()
        {
            var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            var random = new Random();
            return new string(Enumerable.Repeat(chars, 5)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        public async Task CreateRoomAsync(WebSocket webSocket, string playerId, string playerName)
        {
            var roomCode = GenerateRoomCode();
            while (_rooms.ContainsKey(roomCode))
            {
                roomCode = GenerateRoomCode();
            }

            var gameId = Guid.NewGuid().ToString();
            var newPlayer = new Player(playerId, playerName, webSocket, roomCode);
            var room = new GameRoom(roomCode, gameId, playerId);
            room.AddPlayer(newPlayer);

            if (_rooms.TryAdd(roomCode, room) && _players.TryAdd(playerId, newPlayer))
            {
                _logger.LogInformation($"Room {roomCode} created by player {playerName} ({playerId}). GameID: {gameId}");
                var response = new RoomCreatedServerMessage(roomCode, playerId, playerName, gameId, playerId);
                await SendMessageAsync(webSocket, response);
            }
            else
            {
                _logger.LogError($"Failed to add room {roomCode} or player {playerId}.");
                await SendMessageAsync(webSocket, new JoinFailedServerMessage("Failed to create room. Please try again."));
            }
        }

        public async Task JoinRoomAsync(WebSocket webSocket, string playerId, string playerName, string roomCode)
        {
            if (!_rooms.TryGetValue(roomCode, out var room))
            {
                await SendMessageAsync(webSocket, new JoinFailedServerMessage("Room not found."));
                return;
            }

            if (room.Players.Count >= 10)
            {
                await SendMessageAsync(webSocket, new JoinFailedServerMessage("Room is full."));
                return;
            }

            if (room.Players.Any(p => p.PlayerId == playerId || p.Name.Equals(playerName, StringComparison.OrdinalIgnoreCase)))
            {
                await SendMessageAsync(webSocket, new JoinFailedServerMessage("Player ID or name already in room."));
                return;
            }

            var newPlayer = new Player(playerId, playerName, webSocket, roomCode);
            room.AddPlayer(newPlayer);

            if (!_players.TryAdd(playerId, newPlayer))
            {
                room.RemovePlayer(newPlayer);
                await SendMessageAsync(webSocket, new JoinFailedServerMessage("Failed to add player. Please try again."));
                _logger.LogError($"Failed to add player {playerId} to global player list for room {roomCode}.");
                return;
            }

            _logger.LogInformation($"Player {playerName} ({playerId}) joined room {roomCode}. GameID: {room.GameId}");

            var joinSuccessResponse = new JoinSuccessServerMessage(
                playerId,
                playerName,
                room.GameId,
                room.Players.Where(p => p.PlayerId != playerId).Select(p => new PlayerInfo(p.PlayerId, p.Name)).ToList(),
                room.HostPlayerId
            );
            await SendMessageAsync(webSocket, joinSuccessResponse);

            var playerJoinedLobbyMessage = new PlayerJoinedLobbyServerMessage(playerId, playerName);
            await BroadcastMessageToRoomAsync(roomCode, playerJoinedLobbyMessage, playerId);
        }

        public async Task StartGameAsync(string playerId)
        {
            if (!_players.TryGetValue(playerId, out var requestingPlayer))
            {
                _logger.LogWarning($"StartGameAsync: Player {playerId} not found.");
                return;
            }

            if (!_rooms.TryGetValue(requestingPlayer.CurrentRoomCode, out var room))
            {
                _logger.LogWarning($"StartGameAsync: Room {requestingPlayer.CurrentRoomCode} not found for player {playerId}.");
                await SendMessageAsync(requestingPlayer.Socket, new JoinFailedServerMessage("Room not found.")); // Or a more specific error
                return;
            }

            if (room.HostPlayerId != playerId)
            {
                _logger.LogWarning($"Player {playerId} attempted to start game in room {room.RoomCode} but is not the host.");
                await SendMessageAsync(requestingPlayer.Socket, new JoinFailedServerMessage("Only the host can start the game."));
                return;
            }

            if (room.GameState != "Lobby")
            {
                _logger.LogInformation($"Game in room {room.RoomCode} has already started or finished.");
                await SendMessageAsync(requestingPlayer.Socket, new JoinFailedServerMessage($"Game is already {room.GameState}."));
                return;
            }

            room.GameState = "InProgress";
            _logger.LogInformation($"Game started in room {room.RoomCode} by host {playerId}");

            var playersInGame = room.Players.Select(p => new PlayerInfo(p.PlayerId, p.Name)).ToList();
            var gameStartedMessage = new GameStartedServerMessage(playersInGame);
            await BroadcastMessageToRoomAsync(room.RoomCode, gameStartedMessage);
        }

        public async Task PlayerDisconnectedAsync(string playerId, WebSocket webSocket)
        {
            if (_players.TryRemove(playerId, out var player))
            {
                if (_rooms.TryGetValue(player.CurrentRoomCode, out var room))
                {
                    room.RemovePlayer(player);
                    _logger.LogInformation($"Player {player.Name} ({playerId}) disconnected from room {player.CurrentRoomCode}.");

                    var playerLeftMessage = new PlayerLeftLobbyServerMessage(playerId, player.Name);
                    await BroadcastMessageToRoomAsync(player.CurrentRoomCode, playerLeftMessage);

                    if (room.Players.Count == 0)
                    {
                        _rooms.TryRemove(room.RoomCode, out _);
                        _logger.LogInformation($"Room {room.RoomCode} is now empty and has been removed.");
                    }
                }
            }
        }


        private async Task SendMessageAsync(WebSocket webSocket, object message)
        {
            if (webSocket.State == WebSocketState.Open)
            {
                var messageJson = JsonSerializer.Serialize(message, _jsonSerializerOptions);
                var bytes = Encoding.UTF8.GetBytes(messageJson);
                await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);
                _logger.LogDebug($"Sent message: {messageJson}");
            }
        }

        private async Task BroadcastMessageToRoomAsync(string roomCode, object message, string? excludePlayerId = null)
        {
            if (_rooms.TryGetValue(roomCode, out var room))
            {
                foreach (var player in room.Players)
                {
                    if (player.PlayerId != excludePlayerId)
                    {
                        await SendMessageAsync(player.Socket, message);
                    }
                }
            }
        }
    }
}
-------------------- END RoomManager.cs --------------------

-------------------- WebSocketMessageHandler.cs (path: apps/api/WebSockets/WebSocketMessageHandler.cs) --------------------
using System;
using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using MyCsApi.Services;
using MyCsApi.Models;

namespace MyCsApi.WebSockets
{
    public class WebSocketMessageHandler
    {
        private readonly RoomManager _roomManager;
        private readonly CardManager _cardManager;
        private readonly ILogger<WebSocketMessageHandler> _logger;
        private static readonly JsonSerializerOptions _jsonSerializerOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        public WebSocketMessageHandler(RoomManager roomManager, CardManager cardManager, ILogger<WebSocketMessageHandler> logger)
        {
            _roomManager = roomManager;
            _cardManager = cardManager;
            _logger = logger;
        }

        public async Task HandleWebSocketAsync(WebSocket webSocket)
        {
            var playerId = Guid.NewGuid().ToString();
            _logger.LogInformation($"WebSocket connection established: {playerId}");

            var buffer = new byte[1024 * 4];
            WebSocketReceiveResult result;

            try
            {
                do
                {
                    result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text && !result.CloseStatus.HasValue)
                    {
                        var messageJson = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        _logger.LogInformation($"Received message from {playerId}: {messageJson}");

                        BaseWebSocketMessage? baseMessage = JsonSerializer.Deserialize<BaseWebSocketMessage>(messageJson, _jsonSerializerOptions);

                        if (baseMessage == null)
                        {
                            _logger.LogWarning($"Could not deserialize base message: {messageJson}");
                            continue;
                        }

                        switch (baseMessage.Type)
                        {
                            case "createRoom":
                                var createRoomMsg = JsonSerializer.Deserialize<CreateRoomClientMessage>(messageJson, _jsonSerializerOptions);
                                if (createRoomMsg != null)
                                    await _roomManager.CreateRoomAsync(webSocket, playerId, createRoomMsg.Payload.PlayerName);
                                break;
                            case "joinRoom":
                                var joinRoomMsg = JsonSerializer.Deserialize<JoinRoomClientMessage>(messageJson, _jsonSerializerOptions);
                                if (joinRoomMsg != null)
                                    await _roomManager.JoinRoomAsync(webSocket, playerId, joinRoomMsg.Payload.PlayerName, joinRoomMsg.Payload.RoomCode);
                                break;
                            case "useCard":
                                var useCardMsg = JsonSerializer.Deserialize<UseCardMessage>(messageJson, _jsonSerializerOptions);
                                if (useCardMsg != null)
                                    await _cardManager.UseCardAsync(webSocket, playerId, useCardMsg.Payload.CardName,
                                        useCardMsg.Payload.TargetPlayerId);
                                break;
                            case "startGame":
                                await _roomManager.StartGameAsync(playerId);
                                break;
                            default:
                                _logger.LogWarning($"Unknown message type from {playerId}: {baseMessage.Type}");
                                break;
                        }
                    }
                } while (!result.CloseStatus.HasValue);
            }
            catch (WebSocketException ex)
            {
                _logger.LogError($"WebSocketException for {playerId}: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"Exception for {playerId}: {ex.Message}");
            }
            finally
            {
                await _roomManager.PlayerDisconnectedAsync(playerId, webSocket);
                if (webSocket.State != WebSocketState.Closed && webSocket.State != WebSocketState.Aborted)
                {
                    await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Connection closed by server", CancellationToken.None);
                }
                _logger.LogInformation($"WebSocket connection closed for player {playerId}");
            }
        }
    }
}
-------------------- END WebSocketMessageHandler.cs --------------------

-------------------- README.md (path: apps/api/README.md) --------------------
# api

To install dependencies:

```bash
bun install
```

To run:

```bash
bun run index.ts
```

This project was created using `bun init` in bun v1.2.13. [Bun](https://bun.sh) is a fast all-in-one JavaScript runtime.
-------------------- END README.md --------------------

-------------------- .npmrc (path: .npmrc) --------------------
-------------------- END .npmrc --------------------

-------------------- README.md (path: README.md) --------------------
# Turborepo starter

This Turborepo starter is maintained by the Turborepo core team.

## Using this example

Run the following command:

```sh
npx create-turbo@latest
```

## What's inside?

This Turborepo includes the following packages/apps:

### Apps and Packages

- `docs`: a [Next.js](https://nextjs.org/) app
- `web`: another [Next.js](https://nextjs.org/) app
- `@repo/ui`: a stub React component library shared by both `web` and `docs` applications
- `@repo/eslint-config`: `eslint` configurations (includes `eslint-config-next` and `eslint-config-prettier`)
- `@repo/typescript-config`: `tsconfig.json`s used throughout the monorepo

Each package/app is 100% [TypeScript](https://www.typescriptlang.org/).

### Utilities

This Turborepo has some additional tools already setup for you:

- [TypeScript](https://www.typescriptlang.org/) for static type checking
- [ESLint](https://eslint.org/) for code linting
- [Prettier](https://prettier.io) for code formatting

### Build

To build all apps and packages, run the following command:

```
cd my-turborepo
pnpm build
```

### Develop

To develop all apps and packages, run the following command:

```
cd my-turborepo
pnpm dev
```

### Remote Caching

> [!TIP]
> Vercel Remote Cache is free for all plans. Get started today at [vercel.com](https://vercel.com/signup?/signup?utm_source=remote-cache-sdk&utm_campaign=free_remote_cache).

Turborepo can use a technique known as [Remote Caching](https://turborepo.com/docs/core-concepts/remote-caching) to share cache artifacts across machines, enabling you to share build caches with your team and CI/CD pipelines.

By default, Turborepo will cache locally. To enable Remote Caching you will need an account with Vercel. If you don't have an account you can [create one](https://vercel.com/signup?utm_source=turborepo-examples), then enter the following commands:

```
cd my-turborepo
npx turbo login
```

This will authenticate the Turborepo CLI with your [Vercel account](https://vercel.com/docs/concepts/personal-accounts/overview).

Next, you can link your Turborepo to your Remote Cache by running the following command from the root of your Turborepo:

```
npx turbo link
```

## Useful Links

Learn more about the power of Turborepo:

- [Tasks](https://turborepo.com/docs/crafting-your-repository/running-tasks)
- [Caching](https://turborepo.com/docs/crafting-your-repository/caching)
- [Remote Caching](https://turborepo.com/docs/core-concepts/remote-caching)
- [Filtering](https://turborepo.com/docs/crafting-your-repository/running-tasks#using-filters)
- [Configuration Options](https://turborepo.com/docs/reference/configuration)
- [CLI Usage](https://turborepo.com/docs/reference/command-line-reference)
-------------------- END README.md --------------------

-------------------- turbo.json (path: turbo.json) --------------------
{
  "$schema": "https://turborepo.com/schema.json",
  "ui": "tui",
  "tasks": {
    "build": {
      "dependsOn": ["^build"],
      "inputs": ["$TURBO_DEFAULT$", ".env*"],
      "outputs": [".next/**", "!.next/cache/**"]
    },
    "lint": {
      "dependsOn": ["^lint"]
    },
    "check-types": {
      "dependsOn": ["^check-types"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    }
  }
}
-------------------- END turbo.json --------------------

-------------------- coderoyalereal.sln (path: coderoyalereal.sln) --------------------
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.2.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "apps", "apps", "{1787FE1D-075E-9E68-7218-25F1BD1BBEAB}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyCsApi", "apps\api\MyCsApi.csproj", "{4733770F-F634-73FE-47B0-B8304BD51A17}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{4733770F-F634-73FE-47B0-B8304BD51A17}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4733770F-F634-73FE-47B0-B8304BD51A17}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4733770F-F634-73FE-47B0-B8304BD51A17}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4733770F-F634-73FE-47B0-B8304BD51A17}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{4733770F-F634-73FE-47B0-B8304BD51A17} = {1787FE1D-075E-9E68-7218-25F1BD1BBEAB}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {8AFC729D-C5A8-4E37-B8DF-6F143CCBCBE2}
	EndGlobalSection
EndGlobal
-------------------- END coderoyalereal.sln --------------------

